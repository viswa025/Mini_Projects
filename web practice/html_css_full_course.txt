```
# HTML & CSS Full Course - Beginner to Pro (Bro Code)
# Consolidated code for topics 1 to 37
# Each topic includes HTML and CSS (where applicable), with additional details on purpose and best practices

# Topic 1: Basic HTML Document Structure and Linking CSS
# Purpose: Establishes the foundation of an HTML5 document, including DOCTYPE, metadata, and linking an external stylesheet for reusable CSS.
# Best Practices: Use `lang="en"` for accessibility, ensure `meta charset="UTF-8"` for character encoding, and include `viewport` meta tag for responsive design.
# File: index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My First Website</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <!-- Visible content goes here -->
</body>
</html>

# File: style.css
/* Your CSS rules will go here */

# Topic 2: Basic HTML Elements
# Purpose: Introduces fundamental HTML elements for structuring content, including headers, paragraphs, line breaks, horizontal rules, and comments.
# Best Practices: Use semantic tags (e.g., `<p>` for text, `<h1>` for main headings) to improve accessibility and SEO.
# File: index.html (within <body>)
<h1>This is an H1 heading</h1>
<h2>This is an H2 heading</h2>
<h3>This is an H3 heading</h3>
<h4>This is an H4 heading</h4>
<h5>This is an H5 heading</h5>
<h6>This is an H6 heading</h6>
<p>Some text goes here. This is a normal paragraph.</p>
<pre>
This is pre-formatted text.
It retains all
  line breaks and spaces.
</pre>
This is some text.<br>This is on a new line.
<hr>
<!-- This is a comment -->
<p>This is visible text.</p>

# Topic 3: Hyperlinks (Anchor Tags)
# Purpose: Creates clickable links to external websites, local files, or email addresses, enhancing navigation.
# Best Practices: Use `target="_blank"` with `rel="noopener"` for external links to improve security, and ensure descriptive `title` attributes for accessibility.
# File: index.html (within <body>)
<!-- External Link -->
<a href="https://www.google.com" target="_blank" title="Goes to Google" rel="noopener">Click me to go to Google</a>
<br>
<!-- Relative Link (linking to another HTML file in the same directory) -->
<a href="lyrics.html">Song Lyrics</a>
<br>
<!-- Email Link -->
<a href="mailto:test@fake.com">Email me</a>

# Topic 4: Images (Image Tags)
# Purpose: Embeds images in a webpage, with options to set dimensions and link to URLs.
# Best Practices: Always include `alt` text for accessibility, use relative paths for local images, and ensure images are optimized for web performance.
# File Structure: Place images in an `images` folder (e.g., website/images/dog.png).
# File: index.html (within <body>)
<!-- Basic Image with Dimensions and Alt Text -->
<img src="images/dog.png" alt="This is a picture of a dog" height="200" width="200">
<br>
<!-- Image as a Hyperlink -->
<a href="https://en.wikipedia.org/wiki/Dog" target="_blank" rel="noopener">
    <img src="images/dog.png" alt="Link to dog Wikipedia page" height="150">
</a>
<br>
<!-- GIF Image -->
<img src="images/smiling_dog.gif" alt="Smiling dog GIF" height="200">

# Topic 5: Audio (Audio Tags)
# Purpose: Embeds audio files with playback controls, supporting multiple formats for compatibility.
# Best Practices: Provide fallback `<source>` elements for different audio formats, avoid `autoplay` unless user-initiated to respect accessibility guidelines.
# File Structure: Place audio files in a `music` folder (e.g., website/music/song1.mp3).
# File: index.html (within <body>)
<!-- Basic Audio Player -->
<p>My First Song</p>
<audio controls>
    <source src="music/song1.mp3" type="audio/mpeg">
    <source src="music/song1.wav" type="audio/wav">
    Your browser does not support the audio element.
</audio>
<br>
<!-- Autoplay and Muted Audio -->
<p>My Second Song (Autoplay, Muted)</p>
<audio autoplay muted loop>
    <source src="music/song2.mp3" type="audio/mpeg">
</audio>

# Topic 6: Video (Video Tags)
# Purpose: Embeds video files with playback controls, supporting hyperlinks and various attributes.
# Best Practices: Use `controls` for user interaction, include fallback `<source>` elements, and optimize video files for web performance.
# File Structure: Place videos in a `videos` folder (e.g., website/videos/zelda.mp4).
# File: index.html (within <body>)
<!-- Basic Video Player with Controls -->
<video width="500" controls>
    <source src="videos/zelda.mp4" type="video/mp4">
    <source src="videos/zelda.webm" type="video/webm">
    Your browser does not support the video tag.
</video>
<br>
<!-- Autoplay, Muted, Looping Video -->
<video width="500" autoplay muted loop>
    <source src="videos/zelda.mp4" type="video/mp4">
</video>
<br>
<!-- Video as a Hyperlink -->
<a href="https://en.wikipedia.org/wiki/The_Legend_of_Zelda" target="_blank" rel="noopener">
    <video width="300" controls>
        <source src="videos/zelda.mp4" type="video/mp4">
    </video>
</a>

# Topic 7: Favicon
# Purpose: Adds a small icon to the browser tab, enhancing brand recognition.
# Best Practices: Use `.ico` or `.png` formats, ensure the favicon is 16x16 or 32x32 pixels, and place it in the `images` folder.
# File Structure: website/images/favicon.jpeg
# File: index.html (within <head>)
<link rel="icon" type="image/jpeg" href="images/favicon.jpeg">

# Topic 8: Text Formatting
# Purpose: Applies visual formatting to text for emphasis or styling using HTML tags.
# Best Practices: Prefer semantic tags (`<strong>`, `<em>`) over presentational ones (`<b>`, `<i>`) for accessibility and SEO.
# File: index.html (within <body>)
<p>This is normal text</p>
<p>This is <b>bold</b> text</p>
<p>This is <i>italic</i> text</p>
<p>This is <u>underlined</u> text</p>
<p>This is <del>deleted</del> text</p>
<p>This is <big>big</big> text</p>
<p>This is <small>small</small> text</p>
<p>This is <sub>subscript</sub> text</p>
<p>This is <sup>superscript</sup> text</p>
<p>This is <tt>monospaced</tt> text</p>
<p>This is <mark style="background-color: lightgreen;">highlighted</mark> text</p>

# Topic 9: Span and Div Tags
# Purpose: Groups elements for styling or layout, with `<span>` for inline and `<div>` for block-level content.
# Best Practices: Use `<div>` for structural layout and `<span>` for inline text styling; avoid overusing `<div>` for semantic elements.
# File: index.html (within <body>)
<!-- Span Example -->
<h1>This is a <span style="background-color: tomato;">span</span> title</h1>
<p>This is a <span style="background-color: tomato;">span</span> sentence</p>
<!-- Div Example -->
<div style="background-color: cyan;">
    <h1>This is a div title</h1>
</div>
<div style="background-color: cyan;">
    <p>This is a div sentence</p>
</div>
<!-- Span within a paragraph -->
<p>This is a paragraph with a <span style="background-color: tomato;">highlighted sentence.</span> More text follows.</p>
<!-- Div within a paragraph (demonstrating block-level nature) -->
<p>This is a paragraph with a <div style="background-color: cyan;">block-level division</div> within it, which breaks the flow of text.</p>

# Topic 10: Lists
# Purpose: Organizes content into ordered, unordered, or description lists for better readability.
# Best Practices: Use `<ul>` for non-sequential items, `<ol>` for sequential items, and `<dl>` for key-value pairs; ensure nested lists are properly structured.
# File: index.html (within <body>)
<h4>Groceries</h4>
<ul>
    <li>Milk</li>
    <li>Eggs</li>
    <li>Bread</li>
    <li>Coffee Supplies
        <ul>
            <li>Coffee Beans</li>
            <li>Creamer</li>
            <li>Sugar</li>
        </ul>
    </li>
</ul>
<h4>My To-Do List</h4>
<ol>
    <li>Eat breakfast</li>
    <li>Go to school or class</li>
    <li>Walk your dog</li>
    <li>Go to work</li>
</ol>
<h4 style="background-color: lightgreen;">Mythical Creatures</h4>
<dl style="border: 2px solid green;">
    <dt>Dragon</dt>
    <dd>A mythical monster resembling a giant reptile, sometimes shown as having wings.</dd>
    <dt>Phoenix</dt>
    <dd>An immortal bird associated with Greek mythology.</dd>
    <dt>Vampire</dt>
    <dd>Creature definition: Let's copy this create another pair of DD tags then paste that definition here's the definition for vampire.</dd>
    <dt>Werewolf</dt>
    <dd>An individual that can shape shift into a wolf.</dd>
</dl>

# Topic 11: Tables
# Purpose: Displays tabular data in rows and columns, useful for schedules or comparisons.
# Best Practices: Use `<th>` for headers, ensure tables are accessible with `scope` attributes, and use CSS for styling instead of deprecated attributes like `border`.
# File: index.html (within <body>)
<h3>Store Hours</h3>
<table border="1" style="background-color: black;">
    <tr align="center" style="background-color: lightblue;">
        <th width="100">Sunday</th>
        <th width="100">Monday</th>
        <th width="100">Tuesday</th>
        <th width="100">Wednesday</th>
        <th width="100">Thursday</th>
        <th width="100">Friday</th>
        <th width="100">Saturday</th>
    </tr>
    <tr align="center" style="background-color: aliceblue;">
        <td>Closed</td>
        <td>9 to 5</td>
        <td>9 to 5</td>
        <td>9 to 5</td>
        <td>9 to 5</td>
        <td>9 to 5</td>
        <td>10 to 2</td>
    </tr>
</table>

# Topic 12: Buttons
# Purpose: Creates interactive buttons for user actions, optionally linked to JavaScript or URLs.
# Best Practices: Use semantic `<button>` tags, ensure accessibility with `aria-label` for complex buttons, and style hover states for feedback.
# File: index.html (within <body>)
<!-- Styled Button -->
<button style="font-size: 25px; background-color: gray; color: lightblue; border-radius: 25px;">Click me</button>
<br>
<!-- Button as a Hyperlink -->
<a href="page2.html">
    <button style="font-size: 25px; background-color: gray; color: lightblue; border-radius: 25px;">Go to Page 2</button>
</a>
<br>
<!-- Button executing JavaScript -->
<p id="greeting">Hello</p>
<button onclick="doSomething()">Change Text</button>
<script>
    function doSomething() {
        document.getElementById("greeting").innerHTML = "Goodbye";
    }
</script>

# Topic 13: Forms
# Purpose: Collects user input with various field types, supporting form submission to a server.
# Best Practices: Use `for` and `id` for label-input association, include `required` and validation attributes, and ensure `enctype` for file uploads.
# File: index.html (within <body>)
<form action="index.php" method="POST" enctype="multipart/form-data">
    <!-- Text Input -->
    <label for="username">Username:</label><br>
    <input type="text" id="username" name="username" placeholder="SpongeBob" required minlength="6" maxlength="15"><br><br>
    <!-- Password Input -->
    <label for="password">Password:</label><br>
    <input type="password" id="password" name="password" placeholder="Enter password" required minlength="6" maxlength="15"><br><br>
    <!-- Email Input -->
    <label for="email">Email:</label><br>
    <input type="email" id="email" name="email" placeholder="s.squarepants@gmail.com"><br><br>
    <!-- Phone Number Input with Pattern -->
    <label for="phone">Phone Number:</label><br>
    <input type="tel" id="phone" name="phone" placeholder="123-456-7890" pattern="{3}-{3}-{4}"><br><br>
    <!-- Date Input -->
    <label for="bday">Birth Date:</label><br>
    <input type="date" id="bday" name="bday"><br><br>
    <!-- Number Input with Min/Max -->
    <label for="quantity">Quantity:</label><br>
    <input type="number" id="quantity" name="quantity" value="1" min="0" max="99"><br><br>
    <!-- Radio Buttons (grouped by 'name' attribute) -->
    <label>Title:</label><br>
    <input type="radio" id="mr" name="title" value="Mr">
    <label for="mr">Mr</label><br>
    <input type="radio" id="miss" name="title" value="Miss">
    <label for="miss">Miss</label><br>
    <input type="radio" id="phd" name="title" value="PhD">
    <label for="phd">PhD</label><br><br>
    <!-- Dropdown Menu -->
    <label for="payment">Payment:</label><br>
    <select id="payment" name="payment">
        <option value="Visa">Visa</option>
        <option value="MasterCard">MasterCard</option>
        <option value="Gift Card">Gift Card</option>
    </select><br><br>
    <!-- Checkbox -->
    <input type="checkbox" id="subscribe" name="subscribe">
    <label for="subscribe">Subscribe</label><br><br>
    <!-- Text Area -->
    <label for="comment">Comment:</label><br>
    <textarea id="comment" name="comment" rows="3" cols="25"></textarea><br><br>
    <!-- File Input -->
    <label for="file">File:</label><br>
    <input type="file" id="file" name="file" accept="image/png, image/jpeg"><br><br>
    <!-- Submit and Reset Buttons -->
    <input type="submit" value="Submit">
    <input type="reset" value="Reset">
</form>

# Topic 14: Header and Footer Elements
# Purpose: Provides semantic structure for the top and bottom of a webpage, often including navigation and metadata.
# Best Practices: Use `<header>` and `<footer>` for semantic clarity, include navigation in `<header>`, and ensure contact info in `<footer>` is accessible.
# File: index.html (within <body>)
<header>
    <h2>Welcome to Bro Code</h2>
    <nav>
        <a href="#">Home</a> |
        <a href="#">About Us</a> |
        <a href="#">Products</a> |
        <a href="#">Contact Us</a>
    </nav>
    <hr>
</header>
<main>
    <h4>Check out these cool moves</h4>
    <img src="profile_pic.png" alt="Profile Pick">
    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Laboriosam, sit dolore! Laboriosam, sit dolore!</p>
</main>
<footer>
    <hr>
    <p>Author: Bro Code<br>
    &copy; Copyright Reserved<br>
    <small><a href="mailto:brocode@fake.com">brocode@fake.com</a></small></p>
</footer>
# File: style.css
header {
    background-color: hsl(240, 60%, 85%);
    text-align: center;
    padding: 25px;
}
footer {
    background-color: hsl(240, 60%, 85%);
    text-align: center;
    padding: 25px;
}

# Topic 15: CSS Introduction (Styling Methods)
# Purpose: Introduces CSS for styling HTML, with inline, internal, and external methods.
# Best Practices: Prefer external CSS for maintainability, use classes for reusable styles, and IDs for unique elements.
# File: index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My First Website</title>
    <link rel="stylesheet" href="style.css">
    <style>
        body {
            background-color: black;
        }
        h1 {
            color: white;
        }
        p {
            color: white;
        }
    </style>
</head>
<body>
    <h1 style="color: white;">This is my website</h1>
    <p style="color: white;">This is a paragraph.</p>
    <p style="color: red;">This is another paragraph.</p>
    <p id="p1" class="odd">This is the first paragraph.</p>
    <p id="p2" class="even">This is the second paragraph.</p>
    <p id="p3" class="odd">This is the third paragraph.</p>
    <p id="p4" class="even">This is the fourth paragraph.</p>
</body>
</html>
# File: style.css
body {
    background-color: black;
}
h1 {
    color: white;
}
p {
    color: white;
}
/* Select by ID */
#p1 {
    color: red;
}
#p2 {
    color: orange;
}
/* Select by Class */
.odd {
    color: red;
}
.even {
    color: blue;
}

# Topic 16: CSS Colors
# Purpose: Applies colors to elements using various formats (names, RGB, hex, HSL).
# Best Practices: Use HSL for consistent color schemes, ensure sufficient contrast for accessibility (e.g., WCAG guidelines).
# File: style.css
body {
    background-color: hsl(0, 0%, 20%);
}
#p1 {
    color: tomato;
}
#p2 {
    color: rgb(173, 216, 230);
}
#p3 {
    color: #00FF00;
}
#p4 {
    color: hsl(270, 100%, 50%);
}

# Topic 17: Fonts and Google Fonts
# Purpose: Controls text appearance with font properties and custom fonts via Google Fonts or local files.
# Best Practices: Provide fallback fonts, use `@font-face` for local fonts, and test font rendering across devices.
# File Structure: website/fonts/Roboto-Light.ttf, website/fonts/OpenSans-Regular.ttf
# File: index.html (within <head>)
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Open+Sans&family=Roboto:wght@300&display=swap" rel="stylesheet">
# File: style.css
@font-face {
    font-family: 'Roboto Light';
    src: url('fonts/Roboto-Light.ttf') format('truetype');
}
@font-face {
    font-family: 'Open Sans';
    src: url('fonts/OpenSans-Regular.ttf') format('truetype');
}
h1 {
    font-family: 'Roboto Light', Arial, sans-serif;
    font-size: 2em;
    font-weight: bold;
}
p {
    font-family: 'Open Sans', 'Courier New', monospace;
    font-size: 1.1em;
    font-style: italic;
}

# Topic 18: Borders
# Purpose: Adds borders around elements to define boundaries or enhance visuals.
# Best Practices: Use shorthand `border` property for simplicity, ensure border colors contrast with backgrounds.
# File: style.css
h1 {
    border: 3px solid hsl(270, 50%, 50%);
    border-radius: 20px;
}
p {
    border-bottom: 3px solid red;
    border-top: 3px solid yellow;
    border-left: 3px dotted orange;
    border-right: 3px dotted lightgreen;
    border-radius: 10px;
}

# Topic 19: Shadows (Text and Box)
# Purpose: Adds depth to elements with text or box shadows, enhancing visual hierarchy.
# Best Practices: Use subtle shadows for readability, test on different backgrounds for visibility.
# File: index.html (within <body>)
<h1>Bro Code</h1>
<div id="box1">Hi</div>
# File: style.css
h1 {
    text-shadow: 3px 5px 5px red, -3px -5px 5px blue;
}
#box1 {
    width: 250px;
    height: 250px;
    border: 5px solid black;
    background-color: white;
    box-shadow: 3px 3px 5px grey;
}

# Topic 20: Margins
# Purpose: Controls spacing outside elements, aiding layout and alignment.
# Best Practices: Use `margin: auto` for centering, set `body { margin: 0; }` to remove default margins.
# File: index.html (within <body>)
<div class="box" id="box1">Box One</div>
<div class="box" id="box2">Box Two</div>
# File: style.css
body {
    margin: 0;
}
.box {
    border: 5px solid black;
    font-size: 5em;
    width: 250px;
    height: 250px;
    text-align: center;
    line-height: 250px;
}
#box1 {
    background-color: red;
    margin-top: 50px;
    margin-left: auto;
    margin-right: auto;
}
#box2 {
    background-color: blue;
    margin: 50px;
}

# Topic 21: Float Property
# Purpose: Positions elements (e.g., images) to allow content to wrap around them, useful for layouts.
# Best Practices: Use `display: flow-root` or `clear` to manage float overflow, consider Flexbox/Grid for modern layouts.
# File Structure: website/images/pokeball.png, website/images/pikachu.png
# File: index.html (within <body>)
<img id="img1" src="images/pokeball.png" alt="Pokeball" height="150">
<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Laboriosam, sit dolore! Laboriosam, sit dolore!</p>
<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Laboriosam, sit dolore! Laboriosam, sit dolore!</p>
<img id="img2" src="images/pikachu.png" alt="Pikachu" height="150">
<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Laboriosam, sit dolore! Laboriosam, sit dolore!</p>
<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Laboriosam, sit dolore! Laboriosam, sit dolore!</p>
# File: style.css
body {
    border: 3px solid black;
    display: flow-root;
}
#img1 {
    float: left;
    margin-right: 10px;
}
#img2 {
    float: right;
    margin-left: 10px;
}

# Topic 22: Overflow Property
# Purpose: Manages content that exceeds an element’s dimensions, controlling visibility or scrollbars.
# Best Practices: Use `overflow: auto` for dynamic content, ensure accessibility for scrollable areas.
# File: index.html (within <body>)
<div class="container">
    <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Vitae, doloremque? Numquam, aspernatur recusandae, animi deserunt, quod dolor eum praesentium non deleniti sint minima voluptatibus reiciendis minus dolorem? Blanditiis, animi! Exercitationem? Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos, impedit.</p>
</div>
# File: style.css
.container {
    border: 2px solid black;
    height: 75px;
    overflow: auto;
}

# Topic 23: Display Property
# Purpose: Controls how elements are rendered (block, inline, inline-block, none) in the layout.
# Best Practices: Use `inline-block` for flexible layouts, avoid `display: none` for content that should remain accessible.
# File: index.html (within <body>)
<div class="element" id="div1">Div</div>
<span class="element" id="span1">Span</span>
<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos, impedit.</p>
# File: style.css
.element {
    background-color: lightgray;
    border: 2px solid black;
    margin: 5px;
}
#div1 {
    display: block;
    width: 100px;
    height: 100px;
    background-color: red;
}
#span1 {
    display: inline-block;
    width: 100px;
    height: 100px;
    background-color: blue;
}

# Topic 24: Width and Height Properties
# Purpose: Sets explicit dimensions for elements, controlling layout size.
# Best Practices: Use `box-sizing: border-box` globally, prefer relative units (%, vw, vh) for responsiveness.
# File: index.html (within <body>)
<div class="container">
    <div class="box">
        <h2>This is number one</h2>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>
    </div>
    <div class="box">
        <h2>This is number two</h2>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>
    </div>
</div>
# File: style.css
* {
    box-sizing: border-box;
}
.container {
    background-color: lightgray;
    height: 100vh;
}
.box {
    border: 2px solid black;
    width: 50%;
    height: auto;
    float: left;
    padding: 10px;
    background-color: white;
    text-align: center;
    min-height: 50%;
}

# Topic 25: Position Property
# Purpose: Controls element placement relative to normal flow, parent, or viewport.
# Best Practices: Use `relative` for minor adjustments, `absolute` for precise positioning, and `sticky` for navigation bars.
# File: index.html (within <body>)
<div id="box1">
    Box One
    <div id="box2">Box Two</div>
</div>
<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. ... (20 paragraphs for scrolling effect)</p>
# File: style.css
body {
    margin: 0;
}
#box1 {
    width: 200px;
    height: 200px;
    background-color: blue;
    position: relative;
}
#box2 {
    width: 100px;
    height: 100px;
    background-color: red;
    position: absolute;
    top: 50px;
    left: 50px;
}

# Topic 26: Background Images
# Purpose: Adds images to element backgrounds, controlling their display and behavior.
# Best Practices: Use `background-size: cover` for full coverage, optimize images for performance.
# File Structure: website/images/background.jpeg
# File: style.css
body {
    background-image: url('images/background.jpeg');
    background-repeat: no-repeat;
    background-position: center;
    background-attachment: fixed;
    background-size: cover;
}
h1 {
    color: white;
}
p {
    color: white;
}

# Topic 27: Combinators
# Purpose: Targets elements based on their relationships (descendant, child, sibling) for precise styling.
# Best Practices: Use specific combinators to avoid over-selecting, test for performance in large DOMs.
# File: index.html (within <body>)
<div id="container">
    <p>This is number one</p>
    <p>This is number two</p>
    <div>
        <p>This is number three</p>
    </div>
</div>
<p>This is number four</p>
<p>This is number five</p>
# File: style.css
#container {
    border: 2px solid black;
}
#container + p {
    background-color: yellow;
}

# Topic 28: Pseudo-classes
# Purpose: Styles elements based on their state (e.g., hover, focus) or position (e.g., nth-child).
# Best Practices: Use `:hover` for interactivity, ensure `:focus` styles for accessibility.
# File: index.html (within <body>)
<a href="https://www.google.com">Google</a>
<br><br>
<ul>
    <li>This is number 1</li>
    <li>This is number 2</li>
    <li>This is number 3</li>
    <li>This is number 4</li>
    <li>This is number 5</li>
</ul>
<br>
<div id="greeting">
    Hover here
    <p>Hello</p>
</div>
# File: style.css
a:link {
    color: lightblue;
}
a:visited {
    color: gray;
}
a:hover {
    color: yellow;
    font-size: 1.1em;
}
a:active {
    color: darkblue;
    font-size: 1.1em;
}
li:hover {
    background-color: yellow;
}
li:not(:hover) {
    color: gray;
}
li:nth-child(odd) {
    background-color: lightgreen;
}
#greeting p {
    display: none;
    background-color: lightblue;
    padding: 10px;
}
#greeting:hover p {
    display: block;
}

# Topic 29: Pseudo-elements
# Purpose: Styles specific parts of elements (e.g., first letter, selected text) or adds content.
# Best Practices: Use `::before` and `::after` for decorative content, ensure `::selection` colors are accessible.
# File: index.html (within <body>)
<h1>Hello</h1>
<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Provident, officiis? Vero, voluptatem.</p>
<ul id="fruit">
    <li id="apple">Apple</li>
    <li id="orange">Orange</li>
    <li id="banana">Banana</li>
</ul>
# File: style.css
h1::first-letter {
    font-size: 2em;
    font-style: italic;
}
p::first-line {
    background-color: yellow;
}
p::selection {
    color: green;
    background-color: darkgray;
}
#fruit li::before {
    content: "✔️ ";
}
#apple::after {
    content: " 🍎";
}
#orange::after {
    content: " 🍊";
}
#banana::after {
    content: " 🍌";
}
#fruit li::marker {
    content: "✅ ";
    color: green;
    font-size: 1.2em;
}

# Topic 30: Pagination
# Purpose: Provides navigation for multi-page content, improving user experience.
# Best Practices: Style active and hover states clearly, ensure links are accessible with keyboard navigation.
# File: index.html (within <body>)
<h1>This is page number one</h1>
<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos, impedit.</p>
<div class="pagination">
    <a href="index.html">&laquo;</a>
    <a href="index.html" class="active">1</a>
    <a href="page2.html">2</a>
    <a href="page3.html">3</a>
    <a href="page4.html">4</a>
    <a href="page5.html">5</a>
    <a href="page2.html">&raquo;</a>
</div>
# File: style.css
.pagination {
    text-align: center;
    margin-top: 20px;
}
.pagination a {
    color: black;
    text-decoration: none;
    padding: 8px 15px;
    display: inline-block;
}
.pagination a.active {
    background-color: lightgreen;
    font-weight: bold;
    border-radius: 5px;
}
.pagination a:not(.active):hover {
    background-color: lightgray;
    border-radius: 5px;
}

# Topic 31: Dropdown Menu
# Purpose: Creates a menu that appears on hover, useful for navigation or options.
# Best Practices: Use `position: absolute` for dropdown content, ensure hover states are clear, and test for mobile compatibility.
# File: index.html (within <body>)
<div class="dropdown">
    <button>Food</button>
    <div class="content">
        <a href="#">Apple</a>
        <a href="#">Orange</a>
        <a href="#">Banana</a>
    </div>
</div>
<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos, impedit.</p>
# File: style.css
.dropdown {
    position: relative;
    display: inline-block;
}
.dropdown button {
    background-color: hsl(240, 60%, 80%);
    color: white;
    padding: 10px 15px;
    border: none;
    cursor: pointer;
}
.dropdown .content {
    background-color: hsl(240, 60%, 95%);
    position: absolute;
    min-width: 100px;
    box-shadow: 0px 8px 16px 0px hsla(0, 0%, 0%, 0.2);
    display: none;
}
.dropdown .content a {
    color: black;
    padding: 10px 15px;
    text-decoration: none;
    display: block;
}
.dropdown button:hover {
    background-color: hsl(240, 60%, 70%);
}
.dropdown .content a:hover {
    background-color: hsl(240, 60%, 90%);
}
.dropdown:hover .content {
    display: block;
}

# Topic 32: Navigation Bar
# Purpose: Provides a horizontal or vertical navigation menu for site-wide links.
# Best Practices: Use `<nav>` for semantic markup, ensure links are keyboard-accessible, and style hover states for clarity.
# File: index.html (within <body>)
<h1>My Website</h1>
<nav class="navbar">
    <ul>
        <li><a href="index.html">Home</a></li>
        <li><a href="about.html">About</a></li>
        <li><a href="products.html">Products</a></li>
        <li><a href="contact.html">Contact</a></li>
    </ul>
</nav>
<main>
    <h3>This is the homepage</h3>
    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quos, impedit.</p>
</main>
# File: style.css
body {
    margin: 0;
}
h1 {
    text-align: center;
}
.navbar {
    background-color: hsl(0, 0%, 25%);
    overflow: hidden;
}
.navbar ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
}
.navbar li {
    float: left;
}
.navbar a {
    color: white;
    text-decoration: none;
    padding: 15px;
    display: block;
    text-align: center;
}
.navbar a:hover {
    background-color: hsl(0, 0%, 10%);
}
main {
    margin-left: 20px;
    margin-right: 20px;
}

# Topic 33: Basic Website Layout
# Purpose: Structures a webpage with semantic elements and CSS for a responsive layout.
# Best Practices: Use Flexbox or Grid for modern layouts, include `@media` queries for responsiveness, and ensure semantic tags for accessibility.
# File: index.html (within <body>)
<header>
    <h2>Header</h2>
</header>
<nav class="navbar">
    <!-- Navigation links would go here -->
</nav>
<main>
    <aside>
        <h2>Aside</h2>
        <p>Lorem ipsum dolor sit amet.</p>
    </aside>
    <section>
        <h2>Section</h2>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>
    </section>
    <article>
        <h2>Article</h2>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>
    </article>
</main>
<footer>
    <h2>Footer</h2>
</footer>
# File: style.css
* {
    box-sizing: border-box;
}
body {
    margin: 0;
}
header, footer {
    background-color: hsl(0, 0%, 85%);
    text-align: center;
    padding: 25px;
}
.navbar {
    background-color: hsl(0, 0%, 30%);
    height: 50px;
}
main {
    overflow: hidden;
}
aside, section, article {
    padding: 10px;
    float: left;
}
aside {
    width: 20%;
    background-color: lightcyan;
}
section {
    width: 40%;
    background-color: lightpink;
}
article {
    width: 40%;
    background-color: lightgoldenrodyellow;
}
footer {
    clear: both;
    display: block;
}
@media screen and (max-width: 600px) {
    aside, section, article {
        width: 100%;
        float: none;
    }
}

# Topic 34: Interactive Image Gallery
# Purpose: Displays a grid of images with descriptions and hover effects for interactivity.
# Best Practices: Use `object-fit` for consistent image scaling, ensure images are accessible with `alt` text, and optimize images for performance.
# File Structure: website/images/salad.jpeg, website/images/soup.jpeg, website/images/pizza.jpeg
# File: index.html (within <body>)
<div class="gallery">
    <a href="images/salad.jpeg" target="_blank">
        <img src="images/salad.jpeg" alt="Salad">
    </a>
    <div class="description">Salads</div>
</div>
<div class="gallery">
    <a href="images/soup.jpeg" target="_blank">
        <img src="images/soup.jpeg" alt="Soup">
    </a>
    <div class="description">Soups</div>
</div>
<div class="gallery">
    <a href="images/pizza.jpeg" target="_blank">
        <img src="images/pizza.jpeg" alt="Pizza">
    </a>
    <div class="description">Pizzas</div>
</div>
# File: style.css
.gallery {
    display: inline-block;
    border: 1px solid hsl(0, 0%, 60%);
    margin: 5px;
    width: 200px;
    text-align: center;
}
.gallery img {
    width: 100%;
    height: auto;
}
.gallery .description {
    padding: 10px;
}
.gallery:hover {
    border-color: hsl(0, 0%, 20%);
}

# Topic 35: Font Awesome Icons
# Purpose: Adds scalable vector icons to enhance visual design and navigation.
# Best Practices: Use CDN for simplicity, ensure icons have `aria-label` for accessibility, and style hover states for interactivity.
# File: index.html (within <head>)
<script src="https://kit.fontawesome.com/YOUR_KIT_CODE.js" crossorigin="anonymous"></script>
# File: index.html (within <body>)
<div class="icons">
    <i class="fa-solid fa-house fa-5x" style="color: hsl(0, 0%, 66%);" aria-label="Home icon"></i>
    <a href="https://twitter.com"><i class="fa-brands fa-twitter fa-5x" style="color: rgb(29, 161, 242);" aria-label="Twitter icon"></i></a>
    <a href="https://youtube.com"><i class="fa-brands fa-youtube fa-5x" style="color: red;" aria-label="YouTube icon"></i></a>
    <a href="https://tiktok.com"><i class="fa-brands fa-tiktok fa-5x" style="color: hsl(0, 0%, 30%);" aria-label="TikTok icon"></i></a>
</div>
# File: style.css
.icons {
    text-align: center;
}
.icons a {
    text-decoration: none;
    margin-right: 20px;
}
.icons .fa-house:hover {
    color: hsl(0, 0%, 76%);
}
.icons .fa-twitter:hover {
    color: hsl(203, 89%, 60%);
}
.icons .fa-youtube:hover {
    color: hsl(0, 100%, 70%);
}
.icons .fa-tiktok:hover {
    color: hsl(0, 0%, 40%);
}

# Topic 36: Flexbox
# Purpose: Provides a flexible one-dimensional layout system for aligning and distributing elements.
# Best Practices: Use `gap` for spacing, test `flex-wrap` for responsiveness, and combine with `justify-content` and `align-items` for precise control.
# File: index.html (within <body>)
<div class="container">
    <div class="box" id="box1">1</div>
    <div class="box" id="box2">2</div>
    <div class="box" id="box3">3</div>
    <div class="box" id="box4">4</div>
</div>
# File: style.css
.container {
    display: flex;
    border: 10px solid black;
    height: 90vh;
}
.box {
    width: 150px;
    height: 150px;
    font-size: 8em;
    text-align: center;
    border-radius: 15px;
    line-height: 150px;
}
#box1 { background-color: hsl(0, 100%, 50%); }
#box2 { background-color: hsl(60, 100%, 50%); }
#box3 { background-color: hsl(120, 100%, 50%); }
#box4 { background-color: hsl(240, 100%, 50%); }

# Topic 37: Transform Property
# Purpose: Modifies elements’ appearance through translation, rotation, scaling, or skewing.
# Best Practices: Combine transforms carefully to avoid performance issues, test across browsers for compatibility.
# File Structure: website/images/shrek.png
# File: index.html (within <body>)
<div id="box1">Hi</div>
<img src="images/shrek.png" alt="Shrek">
# File: style.css
body {
    margin: 0;
}
#box1 {
    width: 250px;
    height: 250px;
    border: 5px solid black;
    background-color: lightgreen;
    font-size: 13em;
    text-align: center;
    line-height: 250px;
    transform: translateX(100px) rotateZ(45deg) scale(0.5);
}
img {
    transform: translateX(100%) rotateZ(180deg) scaleX(2);
}

# Topic 38: Animations
# Purpose: Creates dynamic effects by transitioning elements through keyframes over time.
# Best Practices: Use `animation-timing-function` for smooth transitions, limit animations to avoid performance issues, and ensure accessibility by avoiding excessive motion.
# File: index.html (within <body>)
<div id="box">Hi</div>
# File: style.css
body {
    background-color: hsl(0, 0%, 15%);
}
#box {
    width: 250px;
    height: 250px;
    background-color: red;
    font-size: 13em;
    text-align: center;
    line-height: 250px;
    animation-name: glow;
    animation-duration: 2s;
    animation-iteration-count: infinite;
    animation-direction: alternate;
    animation-play-state: running;
    animation-timing-function: ease-in-out;
}
@keyframes glow {
    0% {
        background-color: red;
        box-shadow: 0 0 0px yellow;
    }
    50% {
        background-color: orange;
        box-shadow: 0 0 50px yellow;
    }
    100% {
        background-color: red;
        box-shadow: 0 0 0px yellow;
    }
}
```